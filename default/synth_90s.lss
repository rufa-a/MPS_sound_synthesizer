
synth_90s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  00000740  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ea  00800148  00800148  000008bc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000112  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000895  00000000  00000000  0000113f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002a4  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000776  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000203  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003dc  00000000  00000000  000026e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00002abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00002af7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c c0       	rjmp	.+24     	; 0x1a <__ctors_end>
   2:	27 c0       	rjmp	.+78     	; 0x52 <__bad_interrupt>
   4:	26 c0       	rjmp	.+76     	; 0x52 <__bad_interrupt>
   6:	25 c0       	rjmp	.+74     	; 0x52 <__bad_interrupt>
   8:	24 c0       	rjmp	.+72     	; 0x52 <__bad_interrupt>
   a:	23 c0       	rjmp	.+70     	; 0x52 <__bad_interrupt>
   c:	22 c0       	rjmp	.+68     	; 0x52 <__bad_interrupt>
   e:	21 c0       	rjmp	.+66     	; 0x52 <__bad_interrupt>
  10:	20 c0       	rjmp	.+64     	; 0x52 <__bad_interrupt>
  12:	1f c0       	rjmp	.+62     	; 0x52 <__bad_interrupt>
  14:	1e c0       	rjmp	.+60     	; 0x52 <__bad_interrupt>
  16:	1d c0       	rjmp	.+58     	; 0x52 <__bad_interrupt>
  18:	1c c0       	rjmp	.+56     	; 0x52 <__bad_interrupt>

0000001a <__ctors_end>:
  1a:	11 24       	eor	r1, r1
  1c:	1f be       	out	0x3f, r1	; 63
  1e:	cf e5       	ldi	r28, 0x5F	; 95
  20:	d2 e0       	ldi	r29, 0x02	; 2
  22:	de bf       	out	0x3e, r29	; 62
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	11 e0       	ldi	r17, 0x01	; 1
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	e0 e4       	ldi	r30, 0x40	; 64
  2e:	f7 e0       	ldi	r31, 0x07	; 7
  30:	03 c0       	rjmp	.+6      	; 0x38 <__CCP__+0x4>
  32:	c8 95       	lpm
  34:	31 96       	adiw	r30, 0x01	; 1
  36:	0d 92       	st	X+, r0
  38:	a8 34       	cpi	r26, 0x48	; 72
  3a:	b1 07       	cpc	r27, r17
  3c:	d1 f7       	brne	.-12     	; 0x32 <__do_copy_data+0xc>

0000003e <__do_clear_bss>:
  3e:	12 e0       	ldi	r17, 0x02	; 2
  40:	a8 e4       	ldi	r26, 0x48	; 72
  42:	b1 e0       	ldi	r27, 0x01	; 1
  44:	01 c0       	rjmp	.+2      	; 0x48 <.do_clear_bss_start>

00000046 <.do_clear_bss_loop>:
  46:	1d 92       	st	X+, r1

00000048 <.do_clear_bss_start>:
  48:	a2 33       	cpi	r26, 0x32	; 50
  4a:	b1 07       	cpc	r27, r17
  4c:	e1 f7       	brne	.-8      	; 0x46 <.do_clear_bss_loop>
  4e:	22 d2       	rcall	.+1092   	; 0x494 <main>
  50:	75 c3       	rjmp	.+1770   	; 0x73c <_exit>

00000052 <__bad_interrupt>:
  52:	d6 cf       	rjmp	.-84     	; 0x0 <__vectors>

00000054 <uart_init>:
//volatile 
unsigned int duration[4] = {1000, 500, 250, 125};


void uart_init(){
	USR = 0x0;//UCSRA = 0x00; //состояние
  54:	1b b8       	out	0x0b, r1	; 11
	UCR = (1<<RXEN) | (1<<TXEN); //управление
  56:	88 e1       	ldi	r24, 0x18	; 24
  58:	8a b9       	out	0x0a, r24	; 10
	//UBRRH=0;	//	UBRR=f/(16*band)-1 f=8000000Гц band=9600, 
	//UBRRL=51;
	UBRR = 11; //скорость 19219
  5a:	8b e0       	ldi	r24, 0x0B	; 11
  5c:	89 b9       	out	0x09, r24	; 9
	//UCSRC=0b10000110;   //  8-битовая посылка
}
  5e:	08 95       	ret

00000060 <uart_receive>:

unsigned char uart_receive(){
	while(!(USR&(1<<RXC)));
  60:	5f 9b       	sbis	0x0b, 7	; 11
  62:	fe cf       	rjmp	.-4      	; 0x60 <uart_receive>
	return UDR;
  64:	8c b1       	in	r24, 0x0c	; 12
}
  66:	08 95       	ret

00000068 <send_Uart>:

void send_Uart(unsigned char c)//	Отправка байта
{
	while(!(USR&(1<<UDRE)))	//	Устанавливается, когда регистр свободен
  68:	5d 9b       	sbis	0x0b, 5	; 11
  6a:	fe cf       	rjmp	.-4      	; 0x68 <send_Uart>
	{}
	UDR = c;
  6c:	8c b9       	out	0x0c, r24	; 12
}
  6e:	08 95       	ret

00000070 <send_Uart_str>:

void send_Uart_str(unsigned char *s)//	Отправка строки
{
  70:	ef 92       	push	r14
  72:	ff 92       	push	r15
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	e8 2e       	mov	r14, r24
  7a:	ce 2d       	mov	r28, r14
  7c:	df 2d       	mov	r29, r15
  7e:	ec 2e       	mov	r14, r28
  80:	fd 2e       	mov	r15, r29
  82:	f9 2e       	mov	r15, r25
  84:	ce 2d       	mov	r28, r14
  86:	df 2d       	mov	r29, r15
	while (*s != 0) send_Uart(*s++);
  88:	01 c0       	rjmp	.+2      	; 0x8c <send_Uart_str+0x1c>
  8a:	ee df       	rcall	.-36     	; 0x68 <send_Uart>
  8c:	89 91       	ld	r24, Y+
  8e:	88 23       	and	r24, r24
  90:	e1 f7       	brne	.-8      	; 0x8a <send_Uart_str+0x1a>
}
  92:	df 91       	pop	r29
  94:	cf 91       	pop	r28
  96:	ff 90       	pop	r15
  98:	ef 90       	pop	r14
  9a:	08 95       	ret

0000009c <send_Uart_number>:

void send_Uart_number(unsigned int c)//	Отправка байта
{
	while(!(USR&(1<<UDRE)))	//	Устанавливается, когда регистр свободен
  9c:	5d 9b       	sbis	0x0b, 5	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <send_Uart_number>
	{}
	UDR = c;
  a0:	8c b9       	out	0x0c, r24	; 12
}
  a2:	08 95       	ret

000000a4 <send_int_Uart>:

void send_int_Uart(unsigned int c)// отправка числа от 0000 до 9999
{
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	0f 92       	push	r0
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp;
	c=c%10000;
  b2:	60 e1       	ldi	r22, 0x10	; 16
  b4:	77 e2       	ldi	r23, 0x27	; 39
  b6:	19 d3       	rcall	.+1586   	; 0x6ea <__udivmodhi4>
	temp=c/100;
  b8:	64 e6       	ldi	r22, 0x64	; 100
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	16 d3       	rcall	.+1580   	; 0x6ea <__udivmodhi4>
  be:	08 2f       	mov	r16, r24
  c0:	86 2f       	mov	r24, r22
	send_Uart(temp/10+'0');
  c2:	1a e0       	ldi	r17, 0x0A	; 10
  c4:	61 2f       	mov	r22, r17
  c6:	05 d3       	rcall	.+1546   	; 0x6d2 <__udivmodqi4>
  c8:	80 5d       	subi	r24, 0xD0	; 208
  ca:	99 83       	std	Y+1, r25	; 0x01
  cc:	cd df       	rcall	.-102    	; 0x68 <send_Uart>
	send_Uart(temp%10+'0');
  ce:	99 81       	ldd	r25, Y+1	; 0x01
  d0:	89 2f       	mov	r24, r25
  d2:	80 5d       	subi	r24, 0xD0	; 208
  d4:	c9 df       	rcall	.-110    	; 0x68 <send_Uart>
	temp=c%100;;
  d6:	80 2f       	mov	r24, r16
	send_Uart(temp/10+'0');
  d8:	61 2f       	mov	r22, r17
  da:	fb d2       	rcall	.+1526   	; 0x6d2 <__udivmodqi4>
  dc:	80 5d       	subi	r24, 0xD0	; 208
  de:	99 83       	std	Y+1, r25	; 0x01
  e0:	c3 df       	rcall	.-122    	; 0x68 <send_Uart>
	send_Uart(temp%10+'0');
  e2:	99 81       	ldd	r25, Y+1	; 0x01
  e4:	89 2f       	mov	r24, r25
  e6:	80 5d       	subi	r24, 0xD0	; 208
  e8:	bf df       	rcall	.-130    	; 0x68 <send_Uart>
}
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <info_output>:

void info_output(unsigned int num){
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c8 2f       	mov	r28, r24
  fc:	d9 2f       	mov	r29, r25
	send_Uart_str("Input ");
  fe:	80 e6       	ldi	r24, 0x60	; 96
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	b6 df       	rcall	.-148    	; 0x70 <send_Uart_str>
	switch (num){
 104:	c2 30       	cpi	r28, 0x02	; 2
 106:	d1 05       	cpc	r29, r1
 108:	c9 f0       	breq	.+50     	; 0x13c <info_output+0x46>
 10a:	c3 30       	cpi	r28, 0x03	; 3
 10c:	d1 05       	cpc	r29, r1
 10e:	30 f4       	brcc	.+12     	; 0x11c <info_output+0x26>
 110:	20 97       	sbiw	r28, 0x00	; 0
 112:	71 f0       	breq	.+28     	; 0x130 <info_output+0x3a>
 114:	c1 30       	cpi	r28, 0x01	; 1
 116:	d1 05       	cpc	r29, r1
 118:	e9 f4       	brne	.+58     	; 0x154 <info_output+0x5e>
 11a:	0d c0       	rjmp	.+26     	; 0x136 <info_output+0x40>
 11c:	c4 30       	cpi	r28, 0x04	; 4
 11e:	d1 05       	cpc	r29, r1
 120:	99 f0       	breq	.+38     	; 0x148 <info_output+0x52>
 122:	c4 30       	cpi	r28, 0x04	; 4
 124:	d1 05       	cpc	r29, r1
 126:	68 f0       	brcs	.+26     	; 0x142 <info_output+0x4c>
 128:	c5 30       	cpi	r28, 0x05	; 5
 12a:	d1 05       	cpc	r29, r1
 12c:	99 f4       	brne	.+38     	; 0x154 <info_output+0x5e>
 12e:	0f c0       	rjmp	.+30     	; 0x14e <info_output+0x58>
		case 0: send_Uart_str("1st");
 130:	87 e6       	ldi	r24, 0x67	; 103
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e c0       	rjmp	.+28     	; 0x152 <info_output+0x5c>
			break;
		case 1: send_Uart_str("2nd");
 136:	8b e6       	ldi	r24, 0x6B	; 107
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0b c0       	rjmp	.+22     	; 0x152 <info_output+0x5c>
			break;
		case 2: send_Uart_str("3d");
 13c:	8f e6       	ldi	r24, 0x6F	; 111
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 c0       	rjmp	.+16     	; 0x152 <info_output+0x5c>
			break;
		case 3: send_Uart_str("4th");
 142:	82 e7       	ldi	r24, 0x72	; 114
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	05 c0       	rjmp	.+10     	; 0x152 <info_output+0x5c>
			break;
		case 4: send_Uart_str("5th");
 148:	86 e7       	ldi	r24, 0x76	; 118
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <info_output+0x5c>
			break;
		case 5: send_Uart_str("6th");
 14e:	8a e7       	ldi	r24, 0x7A	; 122
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	8e df       	rcall	.-228    	; 0x70 <send_Uart_str>
			break;
		default:
			break;
	}
		
	send_Uart_str(" melody:");//	отправка строки
 154:	8e e7       	ldi	r24, 0x7E	; 126
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	8b df       	rcall	.-234    	; 0x70 <send_Uart_str>
	send_Uart(13);
 15a:	8d e0       	ldi	r24, 0x0D	; 13
 15c:	85 df       	rcall	.-246    	; 0x68 <send_Uart>
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <write_melody>:

char write_buffer[6][39];

void write_melody(int *notes_number, unsigned char buffer, int *write_index, unsigned char status, int *write_permit){
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	e8 2f       	mov	r30, r24
 170:	f9 2f       	mov	r31, r25
 172:	f6 2e       	mov	r15, r22
 174:	c4 2f       	mov	r28, r20
 176:	d5 2f       	mov	r29, r21
	//if (((status & FRAMING_ERROR) == 0)){// && ((status & RX_COMPLETE) == 0)){ //завершение приема 
	//if (button_permit == 1){
		if (*write_index == -1){ //начало записи мелодии
 178:	88 81       	ld	r24, Y
 17a:	99 81       	ldd	r25, Y+1	; 0x01
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	8f 3f       	cpi	r24, 0xFF	; 255
 180:	92 07       	cpc	r25, r18
 182:	41 f4       	brne	.+16     	; 0x194 <write_melody+0x30>
			*write_permit = 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	a0 2f       	mov	r26, r16
 18a:	b1 2f       	mov	r27, r17
 18c:	8d 93       	st	X+, r24
 18e:	9c 93       	st	X, r25
			*write_index = 0;
 190:	19 82       	std	Y+1, r1	; 0x01
 192:	18 82       	st	Y, r1
			TCCR1A = 0x40;
			//duration_delay(duration[0]);			
			_delay_ms(50);
			TCCR1A = 0x00;*/
		}
		if ((buffer == 13) || (*write_index == 38)){ //по нажатию на enter - конец записи мелодии
 194:	bf 2d       	mov	r27, r15
 196:	bd 30       	cpi	r27, 0x0D	; 13
 198:	29 f0       	breq	.+10     	; 0x1a4 <write_melody+0x40>
 19a:	88 81       	ld	r24, Y
 19c:	99 81       	ldd	r25, Y+1	; 0x01
 19e:	86 32       	cpi	r24, 0x26	; 38
 1a0:	91 05       	cpc	r25, r1
 1a2:	e1 f4       	brne	.+56     	; 0x1dc <write_melody+0x78>
			write_buffer[*notes_number][*write_index] = '#';
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	67 e2       	ldi	r22, 0x27	; 39
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 d2       	rcall	.+1280   	; 0x6ae <__mulhi3>
 1ae:	28 81       	ld	r18, Y
 1b0:	39 81       	ldd	r19, Y+1	; 0x01
 1b2:	28 0f       	add	r18, r24
 1b4:	39 1f       	adc	r19, r25
 1b6:	28 5b       	subi	r18, 0xB8	; 184
 1b8:	3e 4f       	sbci	r19, 0xFE	; 254
 1ba:	83 e2       	ldi	r24, 0x23	; 35
 1bc:	a2 2f       	mov	r26, r18
 1be:	b3 2f       	mov	r27, r19
 1c0:	8c 93       	st	X, r24
			*write_permit = 0;
 1c2:	a0 2f       	mov	r26, r16
 1c4:	b1 2f       	mov	r27, r17
 1c6:	1d 92       	st	X+, r1
 1c8:	1c 92       	st	X, r1
			*write_index = -1;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	99 83       	std	Y+1, r25	; 0x01
 1d0:	88 83       	st	Y, r24
			*notes_number += 1;
 1d2:	80 81       	ld	r24, Z
 1d4:	91 81       	ldd	r25, Z+1	; 0x01
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	91 83       	std	Z+1, r25	; 0x01
 1da:	80 83       	st	Z, r24
		
			send_Uart_str(" melody:");//	отправка строки
			send_Uart(13);*/
		}
		//write_index = -1;
		if (*write_permit == 1 && *write_index + 1 < 39 && buffer != 8){ // 41 для '#'
 1dc:	a0 2f       	mov	r26, r16
 1de:	b1 2f       	mov	r27, r17
 1e0:	8d 91       	ld	r24, X+
 1e2:	9c 91       	ld	r25, X
 1e4:	11 97       	sbiw	r26, 0x01	; 1
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 05       	cpc	r25, r1
 1ea:	09 f0       	breq	.+2      	; 0x1ee <write_melody+0x8a>
 1ec:	b7 c0       	rjmp	.+366    	; 0x35c <__stack+0xfd>
 1ee:	28 81       	ld	r18, Y
 1f0:	39 81       	ldd	r19, Y+1	; 0x01
 1f2:	26 32       	cpi	r18, 0x26	; 38
 1f4:	31 05       	cpc	r19, r1
 1f6:	0c f0       	brlt	.+2      	; 0x1fa <write_melody+0x96>
 1f8:	b1 c0       	rjmp	.+354    	; 0x35c <__stack+0xfd>
 1fa:	bf 2d       	mov	r27, r15
 1fc:	b8 30       	cpi	r27, 0x08	; 8
 1fe:	09 f4       	brne	.+2      	; 0x202 <write_melody+0x9e>
 200:	b0 c0       	rjmp	.+352    	; 0x362 <__stack+0x103>
			if (*write_index % 2 == 0){
 202:	20 fd       	sbrc	r18, 0
 204:	8c c0       	rjmp	.+280    	; 0x31e <__stack+0xbf>
				switch (buffer){
 206:	b7 36       	cpi	r27, 0x67	; 103
 208:	09 f4       	brne	.+2      	; 0x20c <write_melody+0xa8>
 20a:	50 c0       	rjmp	.+160    	; 0x2ac <__stack+0x4d>
 20c:	b8 36       	cpi	r27, 0x68	; 104
 20e:	80 f4       	brcc	.+32     	; 0x230 <write_melody+0xcc>
 210:	b4 36       	cpi	r27, 0x64	; 100
 212:	b1 f1       	breq	.+108    	; 0x280 <__stack+0x21>
 214:	b5 36       	cpi	r27, 0x65	; 101
 216:	38 f4       	brcc	.+14     	; 0x226 <write_melody+0xc2>
 218:	b0 32       	cpi	r27, 0x20	; 32
 21a:	09 f4       	brne	.+2      	; 0x21e <write_melody+0xba>
 21c:	73 c0       	rjmp	.+230    	; 0x304 <__stack+0xa5>
 21e:	b1 36       	cpi	r27, 0x61	; 97
 220:	09 f0       	breq	.+2      	; 0x224 <write_melody+0xc0>
 222:	7d c0       	rjmp	.+250    	; 0x31e <__stack+0xbf>
 224:	17 c0       	rjmp	.+46     	; 0x254 <write_melody+0xf0>
 226:	8f 2d       	mov	r24, r15
 228:	86 36       	cpi	r24, 0x66	; 102
 22a:	09 f0       	breq	.+2      	; 0x22e <write_melody+0xca>
 22c:	78 c0       	rjmp	.+240    	; 0x31e <__stack+0xbf>
 22e:	33 c0       	rjmp	.+102    	; 0x296 <__stack+0x37>
 230:	af 2d       	mov	r26, r15
 232:	aa 36       	cpi	r26, 0x6A	; 106
 234:	09 f4       	brne	.+2      	; 0x238 <write_melody+0xd4>
 236:	50 c0       	rjmp	.+160    	; 0x2d8 <__stack+0x79>
 238:	ab 36       	cpi	r26, 0x6B	; 107
 23a:	20 f4       	brcc	.+8      	; 0x244 <write_melody+0xe0>
 23c:	a8 36       	cpi	r26, 0x68	; 104
 23e:	09 f0       	breq	.+2      	; 0x242 <write_melody+0xde>
 240:	6e c0       	rjmp	.+220    	; 0x31e <__stack+0xbf>
 242:	3f c0       	rjmp	.+126    	; 0x2c2 <__stack+0x63>
 244:	bf 2d       	mov	r27, r15
 246:	bb 36       	cpi	r27, 0x6B	; 107
 248:	09 f4       	brne	.+2      	; 0x24c <write_melody+0xe8>
 24a:	51 c0       	rjmp	.+162    	; 0x2ee <__stack+0x8f>
 24c:	b3 37       	cpi	r27, 0x73	; 115
 24e:	09 f0       	breq	.+2      	; 0x252 <write_melody+0xee>
 250:	66 c0       	rjmp	.+204    	; 0x31e <__stack+0xbf>
 252:	0b c0       	rjmp	.+22     	; 0x26a <__stack+0xb>
					case 'a':
						write_buffer[*notes_number][*write_index] = '0';
 254:	80 81       	ld	r24, Z
 256:	91 81       	ldd	r25, Z+1	; 0x01
 258:	67 e2       	ldi	r22, 0x27	; 39
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	28 d2       	rcall	.+1104   	; 0x6ae <__mulhi3>
 25e:	28 0f       	add	r18, r24
 260:	39 1f       	adc	r19, r25
 262:	28 5b       	subi	r18, 0xB8	; 184
 264:	3e 4f       	sbci	r19, 0xFE	; 254
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	57 c0       	rjmp	.+174    	; 0x318 <__stack+0xb9>
						break;
					case 's':
						write_buffer[*notes_number][*write_index] = '1';
 26a:	80 81       	ld	r24, Z
 26c:	91 81       	ldd	r25, Z+1	; 0x01
 26e:	67 e2       	ldi	r22, 0x27	; 39
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	1d d2       	rcall	.+1082   	; 0x6ae <__mulhi3>
 274:	28 0f       	add	r18, r24
 276:	39 1f       	adc	r19, r25
 278:	28 5b       	subi	r18, 0xB8	; 184
 27a:	3e 4f       	sbci	r19, 0xFE	; 254
 27c:	81 e3       	ldi	r24, 0x31	; 49
 27e:	4c c0       	rjmp	.+152    	; 0x318 <__stack+0xb9>
						break;
					case 'd':
						write_buffer[*notes_number][*write_index] = '2';
 280:	80 81       	ld	r24, Z
 282:	91 81       	ldd	r25, Z+1	; 0x01
 284:	67 e2       	ldi	r22, 0x27	; 39
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	12 d2       	rcall	.+1060   	; 0x6ae <__mulhi3>
 28a:	28 0f       	add	r18, r24
 28c:	39 1f       	adc	r19, r25
 28e:	28 5b       	subi	r18, 0xB8	; 184
 290:	3e 4f       	sbci	r19, 0xFE	; 254
 292:	82 e3       	ldi	r24, 0x32	; 50
 294:	41 c0       	rjmp	.+130    	; 0x318 <__stack+0xb9>
						break;
					case 'f':
						write_buffer[*notes_number][*write_index] = '3';
 296:	80 81       	ld	r24, Z
 298:	91 81       	ldd	r25, Z+1	; 0x01
 29a:	67 e2       	ldi	r22, 0x27	; 39
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	07 d2       	rcall	.+1038   	; 0x6ae <__mulhi3>
 2a0:	28 0f       	add	r18, r24
 2a2:	39 1f       	adc	r19, r25
 2a4:	28 5b       	subi	r18, 0xB8	; 184
 2a6:	3e 4f       	sbci	r19, 0xFE	; 254
 2a8:	83 e3       	ldi	r24, 0x33	; 51
 2aa:	36 c0       	rjmp	.+108    	; 0x318 <__stack+0xb9>
						break;
					case 'g':
						write_buffer[*notes_number][*write_index] = '4';
 2ac:	80 81       	ld	r24, Z
 2ae:	91 81       	ldd	r25, Z+1	; 0x01
 2b0:	67 e2       	ldi	r22, 0x27	; 39
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	fc d1       	rcall	.+1016   	; 0x6ae <__mulhi3>
 2b6:	28 0f       	add	r18, r24
 2b8:	39 1f       	adc	r19, r25
 2ba:	28 5b       	subi	r18, 0xB8	; 184
 2bc:	3e 4f       	sbci	r19, 0xFE	; 254
 2be:	84 e3       	ldi	r24, 0x34	; 52
 2c0:	2b c0       	rjmp	.+86     	; 0x318 <__stack+0xb9>
						break;
					case 'h':
						write_buffer[*notes_number][*write_index] = '5';
 2c2:	80 81       	ld	r24, Z
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	67 e2       	ldi	r22, 0x27	; 39
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	f1 d1       	rcall	.+994    	; 0x6ae <__mulhi3>
 2cc:	28 0f       	add	r18, r24
 2ce:	39 1f       	adc	r19, r25
 2d0:	28 5b       	subi	r18, 0xB8	; 184
 2d2:	3e 4f       	sbci	r19, 0xFE	; 254
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	20 c0       	rjmp	.+64     	; 0x318 <__stack+0xb9>
						break;
					case 'j':
						write_buffer[*notes_number][*write_index] = '6';
 2d8:	80 81       	ld	r24, Z
 2da:	91 81       	ldd	r25, Z+1	; 0x01
 2dc:	67 e2       	ldi	r22, 0x27	; 39
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	e6 d1       	rcall	.+972    	; 0x6ae <__mulhi3>
 2e2:	28 0f       	add	r18, r24
 2e4:	39 1f       	adc	r19, r25
 2e6:	28 5b       	subi	r18, 0xB8	; 184
 2e8:	3e 4f       	sbci	r19, 0xFE	; 254
 2ea:	86 e3       	ldi	r24, 0x36	; 54
 2ec:	15 c0       	rjmp	.+42     	; 0x318 <__stack+0xb9>
						break;
					case 'k':
						write_buffer[*notes_number][*write_index] = '7';
 2ee:	80 81       	ld	r24, Z
 2f0:	91 81       	ldd	r25, Z+1	; 0x01
 2f2:	67 e2       	ldi	r22, 0x27	; 39
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	db d1       	rcall	.+950    	; 0x6ae <__mulhi3>
 2f8:	28 0f       	add	r18, r24
 2fa:	39 1f       	adc	r19, r25
 2fc:	28 5b       	subi	r18, 0xB8	; 184
 2fe:	3e 4f       	sbci	r19, 0xFE	; 254
 300:	87 e3       	ldi	r24, 0x37	; 55
 302:	0a c0       	rjmp	.+20     	; 0x318 <__stack+0xb9>
						break;
					case ' ':
						write_buffer[*notes_number][*write_index] = '8';
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	67 e2       	ldi	r22, 0x27	; 39
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	d0 d1       	rcall	.+928    	; 0x6ae <__mulhi3>
 30e:	28 0f       	add	r18, r24
 310:	39 1f       	adc	r19, r25
 312:	28 5b       	subi	r18, 0xB8	; 184
 314:	3e 4f       	sbci	r19, 0xFE	; 254
 316:	88 e3       	ldi	r24, 0x38	; 56
 318:	a2 2f       	mov	r26, r18
 31a:	b3 2f       	mov	r27, r19
 31c:	8c 93       	st	X, r24
					default: break;
				}
			}
				//default:
				//write_buffer[*notes_number][*write_index] = buffer - 1;
			if (*write_index % 2 == 1){
 31e:	28 81       	ld	r18, Y
 320:	39 81       	ldd	r19, Y+1	; 0x01
 322:	82 2f       	mov	r24, r18
 324:	93 2f       	mov	r25, r19
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	f5 d1       	rcall	.+1002   	; 0x716 <__divmodhi4>
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	91 05       	cpc	r25, r1
 330:	89 f4       	brne	.+34     	; 0x354 <__stack+0xf5>
				switch (buffer){
 332:	8f 2d       	mov	r24, r15
 334:	81 53       	subi	r24, 0x31	; 49
 336:	84 30       	cpi	r24, 0x04	; 4
 338:	68 f4       	brcc	.+26     	; 0x354 <__stack+0xf5>
				case ('1'):
				case ('2'):
				case ('3'):
				case ('4'):
					write_buffer[*notes_number][*write_index] = buffer - 1;
 33a:	80 81       	ld	r24, Z
 33c:	91 81       	ldd	r25, Z+1	; 0x01
 33e:	67 e2       	ldi	r22, 0x27	; 39
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	b5 d1       	rcall	.+874    	; 0x6ae <__mulhi3>
 344:	28 0f       	add	r18, r24
 346:	39 1f       	adc	r19, r25
 348:	28 5b       	subi	r18, 0xB8	; 184
 34a:	3e 4f       	sbci	r19, 0xFE	; 254
 34c:	fa 94       	dec	r15
 34e:	e2 2f       	mov	r30, r18
 350:	f3 2f       	mov	r31, r19
 352:	f0 82       	st	Z, r15
			/*OCR1A = height[2];//4748;
			TCCR1A = 0x40;
			//duration_delay(duration[0]);			
			_delay_ms(50);
			TCCR1A = 0x00;*/
			*write_index += 1;
 354:	88 81       	ld	r24, Y
 356:	99 81       	ldd	r25, Y+1	; 0x01
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	06 c0       	rjmp	.+12     	; 0x368 <__stack+0x109>
		}
		if (buffer == 8) //backspace
 35c:	ff 2d       	mov	r31, r15
 35e:	f8 30       	cpi	r31, 0x08	; 8
 360:	29 f4       	brne	.+10     	; 0x36c <__stack+0x10d>
			*write_index -= 1;
 362:	88 81       	ld	r24, Y
 364:	99 81       	ldd	r25, Y+1	; 0x01
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	99 83       	std	Y+1, r25	; 0x01
 36a:	88 83       	st	Y, r24
	//}
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	08 95       	ret

00000378 <format_check>:

unsigned int format_check(unsigned int num){
 378:	67 e2       	ldi	r22, 0x27	; 39
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	98 d1       	rcall	.+816    	; 0x6ae <__mulhi3>
 37e:	e8 2f       	mov	r30, r24
 380:	f9 2f       	mov	r31, r25
 382:	e8 5b       	subi	r30, 0xB8	; 184
 384:	fe 4f       	sbci	r31, 0xFE	; 254
	for (int i = 0; i < 38; i++){
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
		if ((write_buffer[num][i] == '#' || i == 38)) break;
 38a:	21 91       	ld	r18, Z+
 38c:	23 32       	cpi	r18, 0x23	; 35
 38e:	79 f0       	breq	.+30     	; 0x3ae <format_check+0x36>
		if (i % 2 == 0 && !(write_buffer[num][i] == '0' || write_buffer[num][i] == '1' || 
 390:	80 fd       	sbrc	r24, 0
 392:	04 c0       	rjmp	.+8      	; 0x39c <format_check+0x24>
 394:	32 2f       	mov	r19, r18
 396:	30 53       	subi	r19, 0x30	; 48
 398:	39 30       	cpi	r19, 0x09	; 9
 39a:	60 f4       	brcc	.+24     	; 0x3b4 <format_check+0x3c>
						|| write_buffer[num][i] == '8')){
			return 1;
			//error = 1;
			//break;
		}
		if (i % 2 == 1 && !(write_buffer[num][i] == '0' || write_buffer[num][i] == '1' || 
 39c:	80 ff       	sbrs	r24, 0
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <format_check+0x2e>
 3a0:	20 53       	subi	r18, 0x30	; 48
 3a2:	24 30       	cpi	r18, 0x04	; 4
 3a4:	38 f4       	brcc	.+14     	; 0x3b4 <format_check+0x3c>
			*write_index -= 1;
	//}
}

unsigned int format_check(unsigned int num){
	for (int i = 0; i < 38; i++){
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	86 32       	cpi	r24, 0x26	; 38
 3aa:	91 05       	cpc	r25, r1
 3ac:	71 f7       	brne	.-36     	; 0x38a <format_check+0x12>
	}
	/*if (error == 0) 
		return 0;
	else 
		return 1;*/
	return 0;
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <format_check+0x40>
			//error = 1;
			//break;
		}
		if (i % 2 == 1 && !(write_buffer[num][i] == '0' || write_buffer[num][i] == '1' || 
						write_buffer[num][i] == '2' || write_buffer[num][i] == '3')){
			return 1;
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
	/*if (error == 0) 
		return 0;
	else 
		return 1;*/
	return 0;
}
 3b8:	82 2f       	mov	r24, r18
 3ba:	93 2f       	mov	r25, r19
 3bc:	08 95       	ret

000003be <piano>:

void piano(unsigned char t){ //клавиатура 1-й октавы
 3be:	e8 e2       	ldi	r30, 0x28	; 40
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
		if ((t&1) == 0 /*&& height[i] != 0*/){
			//_delay_us(200);
			//while (!(t|1) == 0){
				
				OCR1A = height[i];//4748;
				TCCR1A = 0X40;
 3c2:	90 e4       	ldi	r25, 0x40	; 64
}

void piano(unsigned char t){ //клавиатура 1-й октавы
	unsigned int i = 0;
	for (i =  0; i < 8; i++){
		if ((t&1) == 0 /*&& height[i] != 0*/){
 3c4:	80 fd       	sbrc	r24, 0
 3c6:	0e c0       	rjmp	.+28     	; 0x3e4 <piano+0x26>
			//_delay_us(200);
			//while (!(t|1) == 0){
				
				OCR1A = height[i];//4748;
 3c8:	20 81       	ld	r18, Z
 3ca:	31 81       	ldd	r19, Z+1	; 0x01
 3cc:	3b bd       	out	0x2b, r19	; 43
 3ce:	2a bd       	out	0x2a, r18	; 42
				TCCR1A = 0X40;
 3d0:	9f bd       	out	0x2f, r25	; 47
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d2:	2f e7       	ldi	r18, 0x7F	; 127
 3d4:	3a e1       	ldi	r19, 0x1A	; 26
 3d6:	46 e0       	ldi	r20, 0x06	; 6
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	30 40       	sbci	r19, 0x00	; 0
 3dc:	40 40       	sbci	r20, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <piano+0x1a>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <piano+0x24>
 3e2:	00 00       	nop
 3e4:	32 96       	adiw	r30, 0x02	; 2
	return 0;
}

void piano(unsigned char t){ //клавиатура 1-й октавы
	unsigned int i = 0;
	for (i =  0; i < 8; i++){
 3e6:	31 e0       	ldi	r19, 0x01	; 1
 3e8:	e8 33       	cpi	r30, 0x38	; 56
 3ea:	f3 07       	cpc	r31, r19
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <piano+0x34>
				//duration_delay(duration[0]);			
				_delay_ms(500);
				//_delay_us(200);
			//}
		} 
		t >>= 1;	
 3ee:	86 95       	lsr	r24
 3f0:	e9 cf       	rjmp	.-46     	; 0x3c4 <piano+0x6>
	}
	TCCR1A = 0X00; //отключение динамика
 3f2:	1f bc       	out	0x2f, r1	; 47
}
 3f4:	08 95       	ret

000003f6 <duration_delay>:

void duration_delay(int ms){ //длительности

	while (ms > 0){
 3f6:	0b c0       	rjmp	.+22     	; 0x40e <duration_delay+0x18>
 3f8:	2f e3       	ldi	r18, 0x3F	; 63
 3fa:	3d e0       	ldi	r19, 0x0D	; 13
 3fc:	43 e0       	ldi	r20, 0x03	; 3
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	30 40       	sbci	r19, 0x00	; 0
 402:	40 40       	sbci	r20, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <duration_delay+0x8>
 406:	00 c0       	rjmp	.+0      	; 0x408 <duration_delay+0x12>
 408:	00 00       	nop
	//for (int i = 1; i < ms + 1; i++){
		_delay_ms(250);
		ms = ms - 125;
 40a:	8d 57       	subi	r24, 0x7D	; 125
 40c:	90 40       	sbci	r25, 0x00	; 0
	TCCR1A = 0X00; //отключение динамика
}

void duration_delay(int ms){ //длительности

	while (ms > 0){
 40e:	18 16       	cp	r1, r24
 410:	19 06       	cpc	r1, r25
 412:	94 f3       	brlt	.-28     	; 0x3f8 <duration_delay+0x2>
	//for (int i = 1; i < ms + 1; i++){
		_delay_ms(250);
		ms = ms - 125;
	}
	TCCR1A = 0X00; // выключение звука
 414:	1f bc       	out	0x2f, r1	; 47
}
 416:	08 95       	ret

00000418 <note>:

void note(int h){
	int note_h =0;
	note_h = h;//(int)h - 48;
	OCR1A = height[h];//4748;
 418:	e8 2f       	mov	r30, r24
 41a:	f9 2f       	mov	r31, r25
 41c:	ee 0f       	add	r30, r30
 41e:	ff 1f       	adc	r31, r31
 420:	e8 5d       	subi	r30, 0xD8	; 216
 422:	fe 4f       	sbci	r31, 0xFE	; 254
 424:	80 81       	ld	r24, Z
 426:	91 81       	ldd	r25, Z+1	; 0x01
 428:	9b bd       	out	0x2b, r25	; 43
 42a:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0X40;
 42c:	80 e4       	ldi	r24, 0x40	; 64
 42e:	8f bd       	out	0x2f, r24	; 47
}
 430:	08 95       	ret

00000432 <play_melody>:

void play_melody(unsigned int melody_number/*char record[41]*/){ //* - начало, # - конец, max - 20 нот
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	34 e3       	ldi	r19, 0x34	; 52
 43a:	4c e0       	ldi	r20, 0x0C	; 12
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	30 40       	sbci	r19, 0x00	; 0
 440:	40 40       	sbci	r20, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <play_melody+0xa>
 444:	00 c0       	rjmp	.+0      	; 0x446 <play_melody+0x14>
 446:	00 00       	nop
 448:	67 e2       	ldi	r22, 0x27	; 39
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	30 d1       	rcall	.+608    	; 0x6ae <__mulhi3>
 44e:	c8 2f       	mov	r28, r24
 450:	d9 2f       	mov	r29, r25
 452:	c8 5b       	subi	r28, 0xB8	; 184
 454:	de 4f       	sbci	r29, 0xFE	; 254
 456:	18 c0       	rjmp	.+48     	; 0x488 <play_melody+0x56>
	unsigned int ms = 0;
	//int j = 0;
			_delay_ms(1000);
			while (write_buffer[melody_number][i] != '#'){
				// задание высоты
				if (write_buffer[melody_number][i] != '8')
 458:	88 33       	cpi	r24, 0x38	; 56
 45a:	19 f0       	breq	.+6      	; 0x462 <play_melody+0x30>
					note(((int)write_buffer[melody_number][i] - 48));
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	c0 97       	sbiw	r24, 0x30	; 48
 460:	db df       	rcall	.-74     	; 0x418 <note>
				//включение звука и задержка

				//длительность
				duration_delay(duration[((int)write_buffer[melody_number][i+1] - 48)]);
 462:	e9 81       	ldd	r30, Y+1	; 0x01
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e6 52       	subi	r30, 0x26	; 38
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
 46e:	80 81       	ld	r24, Z
 470:	91 81       	ldd	r25, Z+1	; 0x01
 472:	c1 df       	rcall	.-126    	; 0x3f6 <duration_delay>
				}
				TCCR1A = 0X00; // выключение звука

				j += 1;*/
				//_delay_ms(500);
				duration_delay(duration[((int)write_buffer[melody_number][i+1] - 48)]);
 474:	e9 81       	ldd	r30, Y+1	; 0x01
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	ee 0f       	add	r30, r30
 47a:	ff 1f       	adc	r31, r31
 47c:	e6 52       	subi	r30, 0x26	; 38
 47e:	ff 4f       	sbci	r31, 0xFF	; 255
 480:	80 81       	ld	r24, Z
 482:	91 81       	ldd	r25, Z+1	; 0x01
 484:	b8 df       	rcall	.-144    	; 0x3f6 <duration_delay>
 486:	22 96       	adiw	r28, 0x02	; 2
void play_melody(unsigned int melody_number/*char record[41]*/){ //* - начало, # - конец, max - 20 нот
	unsigned int i = 0;
	unsigned int ms = 0;
	//int j = 0;
			_delay_ms(1000);
			while (write_buffer[melody_number][i] != '#'){
 488:	88 81       	ld	r24, Y
 48a:	83 32       	cpi	r24, 0x23	; 35
 48c:	29 f7       	brne	.-54     	; 0x458 <play_melody+0x26>
				j += 1;*/
				//_delay_ms(500);
				duration_delay(duration[((int)write_buffer[melody_number][i+1] - 48)]);
				i += 2;
			}
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <main>:

int main(void)
{
 494:	6f 92       	push	r6
 496:	7f 92       	push	r7
 498:	8f 92       	push	r8
 49a:	9f 92       	push	r9
 49c:	af 92       	push	r10
 49e:	bf 92       	push	r11
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	df 93       	push	r29
 4ae:	cf 93       	push	r28
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	2d 97       	sbiw	r28, 0x0d	; 13
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61

	unsigned char temp;//, help;
	unsigned int i;
//	unsigned int j;

	PORTC = 0xff; //клавиатура 1-й октавы
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	85 bb       	out	0x15, r24	; 21
	DDRC = 0x00; //на ввод
 4c4:	14 ba       	out	0x14, r1	; 20
	PORTA = 0xff; //кнопки выбора мелодии и записи мелодии
 4c6:	8b bb       	out	0x1b, r24	; 27
	DDRA = 0x00;
 4c8:	1a ba       	out	0x1a, r1	; 26
	PORTD = 0x00;
 4ca:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x20; //на вывод PD5/OC1A - динамик
 4cc:	80 e2       	ldi	r24, 0x20	; 32
 4ce:	81 bb       	out	0x11, r24	; 17
//	PORTE = 0x00;
//	DDRE = 0x04; //на вывод PE2/OC1B - динамик
	PORTB = 0xf8; //PB0..PB2 - динамики для трезвучия
 4d0:	88 ef       	ldi	r24, 0xF8	; 248
 4d2:	88 bb       	out	0x18, r24	; 24
	DDRB = 0x07;
 4d4:	87 e0       	ldi	r24, 0x07	; 7
 4d6:	87 bb       	out	0x17, r24	; 23
	TCCR1A = 0x00;
 4d8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x0B;//0x09;
 4da:	8b e0       	ldi	r24, 0x0B	; 11
 4dc:	8e bd       	out	0x2e, r24	; 46
	for (int i = 0; i < 6; i++){
		write_buffer[i][0] = '#';
 4de:	83 e2       	ldi	r24, 0x23	; 35
 4e0:	80 93 48 01 	sts	0x0148, r24
 4e4:	80 93 6f 01 	sts	0x016F, r24
 4e8:	80 93 96 01 	sts	0x0196, r24
 4ec:	80 93 bd 01 	sts	0x01BD, r24
 4f0:	80 93 e4 01 	sts	0x01E4, r24
 4f4:	80 93 0b 02 	sts	0x020B, r24
	}
	F_do1 = fl;*/



	uart_init();				//	инициализация UART
 4f8:	ad dd       	rcall	.-1190   	; 0x54 <uart_init>
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	94 e3       	ldi	r25, 0x34	; 52
 4fe:	ac e0       	ldi	r26, 0x0C	; 12
 500:	81 50       	subi	r24, 0x01	; 1
 502:	90 40       	sbci	r25, 0x00	; 0
 504:	a0 40       	sbci	r26, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <main+0x6c>
 508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x76>
 50a:	00 00       	nop
	_delay_ms(1000);			//	задержка 1c
	int melody_number = 0;
 50c:	1a 82       	std	Y+2, r1	; 0x02
 50e:	19 82       	std	Y+1, r1	; 0x01
	int note_number = -1;
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	9c 83       	std	Y+4, r25	; 0x04
 516:	8b 83       	std	Y+3, r24	; 0x03

	send_Uart_str("Notes: Do - a, Re - s, Mi - d, Fa - f,");
 518:	87 e8       	ldi	r24, 0x87	; 135
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	a9 dd       	rcall	.-1198   	; 0x70 <send_Uart_str>
	send_Uart(13);
 51e:	8d e0       	ldi	r24, 0x0D	; 13
 520:	a3 dd       	rcall	.-1210   	; 0x68 <send_Uart>
	send_Uart_str("Sol - g, La - h, Si - j, Do - k, Pause - Space, the end - Enter");
 522:	8e ea       	ldi	r24, 0xAE	; 174
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	a4 dd       	rcall	.-1208   	; 0x70 <send_Uart_str>
	send_Uart(13);
 528:	8d e0       	ldi	r24, 0x0D	; 13
 52a:	9e dd       	rcall	.-1220   	; 0x68 <send_Uart>
	send_Uart_str("Durations: 1 - 1, 2 - 1/2, 3 - 1/4, 4 - 1/8");
 52c:	8e ee       	ldi	r24, 0xEE	; 238
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	9f dd       	rcall	.-1218   	; 0x70 <send_Uart_str>
	send_Uart(13);			//	перенос строки
 532:	8d e0       	ldi	r24, 0x0D	; 13
 534:	99 dd       	rcall	.-1230   	; 0x68 <send_Uart>
	info_output(melody_number);
 536:	89 81       	ldd	r24, Y+1	; 0x01
 538:	9a 81       	ldd	r25, Y+2	; 0x02
 53a:	dd dd       	rcall	.-1094   	; 0xf6 <info_output>

	UCR &= ~(1<<RXEN);
 53c:	54 98       	cbi	0x0a, 4	; 10


	char status, data;// = UDR;
	status = USR; //USR
 53e:	8b b1       	in	r24, 0x0b	; 11

	int write_permit = 0;
 540:	1e 82       	std	Y+6, r1	; 0x06
 542:	1d 82       	std	Y+5, r1	; 0x05
	//unsigned int write_permit = 0;


//	unsigned int k = 0; // -----для проверки

	unsigned char pc_arr[6] = {PC0, PC1, PC2, PC3, PC4, PC5};
 544:	ac 2f       	mov	r26, r28
 546:	bd 2f       	mov	r27, r29
 548:	17 96       	adiw	r26, 0x07	; 7
 54a:	e2 e4       	ldi	r30, 0x42	; 66
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	01 90       	ld	r0, Z+
 552:	0d 92       	st	X+, r0
 554:	81 50       	subi	r24, 0x01	; 1
 556:	e1 f7       	brne	.-8      	; 0x550 <main+0xbc>
			{
				data = uart_receive(); // <- status = UCSRA
				
				status = USR;//??
				
				write_melody(&melody_number, data, &note_number, status, &write_permit);
 558:	53 e0       	ldi	r21, 0x03	; 3
 55a:	85 2e       	mov	r8, r21
 55c:	91 2c       	mov	r9, r1
 55e:	8c 0e       	add	r8, r28
 560:	9d 1e       	adc	r9, r29
 562:	45 e0       	ldi	r20, 0x05	; 5
 564:	c4 2e       	mov	r12, r20
 566:	d1 2c       	mov	r13, r1
 568:	cc 0e       	add	r12, r28
 56a:	dd 1e       	adc	r13, r29
 56c:	ac 2e       	mov	r10, r28
 56e:	bd 2e       	mov	r11, r29
 570:	08 94       	sec
 572:	a1 1c       	adc	r10, r1
 574:	b1 1c       	adc	r11, r1
			}
			 // запрет на прием
		} 
		//if (PINB&(1<<PB3)) {
		if (PINA&(1<<PA7)) { // если кнопка отжата
			UCR &= ~(1<<RXEN);
 576:	37 e0       	ldi	r19, 0x07	; 7
 578:	63 2e       	mov	r6, r19
 57a:	71 2c       	mov	r7, r1
 57c:	6c 0e       	add	r6, r28
 57e:	7d 1e       	adc	r7, r29
	//int button_permit = 0;

	while(1)					//	бесконечный рабочий цикл
    {
		
		temp = PINC;
 580:	83 b3       	in	r24, 0x13	; 19
		
		if ((PINA&(1<<PA7))==0) { //если нажата кнопка на запись
 582:	cf 99       	sbic	0x19, 7	; 25
 584:	2f c0       	rjmp	.+94     	; 0x5e4 <main+0x150>
			uart_init();
 586:	8d 87       	std	Y+13, r24	; 0x0d
 588:	65 dd       	rcall	.-1334   	; 0x54 <uart_init>
			piano(temp);
 58a:	8d 85       	ldd	r24, Y+13	; 0x0d
 58c:	18 df       	rcall	.-464    	; 0x3be <piano>
			
			if(USR&(1<<RXC))		//	если пришёл байт по UART
 58e:	5f 9b       	sbis	0x0b, 7	; 11
 590:	29 c0       	rjmp	.+82     	; 0x5e4 <main+0x150>
			{
				data = uart_receive(); // <- status = UCSRA
 592:	66 dd       	rcall	.-1332   	; 0x60 <uart_receive>
 594:	e8 2e       	mov	r14, r24
				
				status = USR;//??
 596:	2b b1       	in	r18, 0x0b	; 11
				
				write_melody(&melody_number, data, &note_number, status, &write_permit);
 598:	8a 2d       	mov	r24, r10
 59a:	9b 2d       	mov	r25, r11
 59c:	6e 2d       	mov	r22, r14
 59e:	48 2d       	mov	r20, r8
 5a0:	59 2d       	mov	r21, r9
 5a2:	0c 2d       	mov	r16, r12
 5a4:	1d 2d       	mov	r17, r13
 5a6:	de dd       	rcall	.-1092   	; 0x164 <write_melody>
					send_Uart_str("Wrong format!");
					send_Uart_str(13);
					info_output(melody_number);
					write_melody(&melody_number, data, &note_number, status, &write_permit);
				}*/
				if (data == 13){
 5a8:	9e 2d       	mov	r25, r14
 5aa:	9d 30       	cpi	r25, 0x0D	; 13
 5ac:	d9 f4       	brne	.+54     	; 0x5e4 <main+0x150>
					if (format_check(melody_number - 1) == 1){
 5ae:	09 81       	ldd	r16, Y+1	; 0x01
 5b0:	1a 81       	ldd	r17, Y+2	; 0x02
 5b2:	e0 2e       	mov	r14, r16
 5b4:	f1 2e       	mov	r15, r17
 5b6:	08 94       	sec
 5b8:	e1 08       	sbc	r14, r1
 5ba:	f1 08       	sbc	r15, r1
 5bc:	8e 2d       	mov	r24, r14
 5be:	9f 2d       	mov	r25, r15
 5c0:	db de       	rcall	.-586    	; 0x378 <format_check>
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	91 05       	cpc	r25, r1
 5c6:	59 f4       	brne	.+22     	; 0x5de <main+0x14a>
						melody_number -= 1;
 5c8:	fa 82       	std	Y+2, r15	; 0x02
 5ca:	e9 82       	std	Y+1, r14	; 0x01
						//send_Uart_str(13);
						send_Uart_str("Wrong format!");
 5cc:	8a e1       	ldi	r24, 0x1A	; 26
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	4f dd       	rcall	.-1378   	; 0x70 <send_Uart_str>
						send_Uart_str(13);
 5d2:	8d e0       	ldi	r24, 0x0D	; 13
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	4c dd       	rcall	.-1384   	; 0x70 <send_Uart_str>
						info_output(melody_number);
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	9a 81       	ldd	r25, Y+2	; 0x02
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <main+0x14e>
						
						//write_melody(&melody_number, data, &note_number, status, &write_permit);
					}
					else
						info_output(melody_number);
 5de:	80 2f       	mov	r24, r16
 5e0:	91 2f       	mov	r25, r17
 5e2:	89 dd       	rcall	.-1262   	; 0xf6 <info_output>
				}
			}
			 // запрет на прием
		} 
		//if (PINB&(1<<PB3)) {
		if (PINA&(1<<PA7)) { // если кнопка отжата
 5e4:	cf 9b       	sbis	0x19, 7	; 25
 5e6:	1b c0       	rjmp	.+54     	; 0x61e <main+0x18a>
			UCR &= ~(1<<RXEN);
 5e8:	54 98       	cbi	0x0a, 4	; 10
 5ea:	e6 2c       	mov	r14, r6
 5ec:	f7 2c       	mov	r15, r7
			for (i = 0; i < 6; i++){
 5ee:	00 e0       	ldi	r16, 0x00	; 0
 5f0:	10 e0       	ldi	r17, 0x00	; 0
				if ((PINC&(1<<pc_arr[i])) == 0)
 5f2:	83 b3       	in	r24, 0x13	; 19
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	ae 2d       	mov	r26, r14
 5f8:	bf 2d       	mov	r27, r15
 5fa:	0d 90       	ld	r0, X+
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <main+0x16e>
 5fe:	95 95       	asr	r25
 600:	87 95       	ror	r24
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <main+0x16a>
 606:	ea 2e       	mov	r14, r26
 608:	fb 2e       	mov	r15, r27
 60a:	80 fd       	sbrc	r24, 0
 60c:	03 c0       	rjmp	.+6      	; 0x614 <main+0x180>
					play_melody(i);
 60e:	80 2f       	mov	r24, r16
 610:	91 2f       	mov	r25, r17
 612:	0f df       	rcall	.-482    	; 0x432 <play_melody>
			 // запрет на прием
		} 
		//if (PINB&(1<<PB3)) {
		if (PINA&(1<<PA7)) { // если кнопка отжата
			UCR &= ~(1<<RXEN);
			for (i = 0; i < 6; i++){
 614:	0f 5f       	subi	r16, 0xFF	; 255
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	06 30       	cpi	r16, 0x06	; 6
 61a:	11 05       	cpc	r17, r1
 61c:	51 f7       	brne	.-44     	; 0x5f2 <main+0x15e>
			}
		}
		
		// попытка проиграть трезвучие
		// 3831 - do, 3033 - mi, 2551 - sol'
		if ((PINB&(1<<PB3)) == 0) {
 61e:	b3 99       	sbic	0x16, 3	; 22
 620:	af cf       	rjmp	.-162    	; 0x580 <main+0xec>

			//TCCR1A = 0X00;


			//for (int aa = 0; aa < 5; aa++){
				PORTB |= (1<<PB0) | (1<<PB1);//PORTB = 0x01;
 622:	88 b3       	in	r24, 0x18	; 24
 624:	83 60       	ori	r24, 0x03	; 3
 626:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 628:	e8 ed       	ldi	r30, 0xD8	; 216
 62a:	fb e0       	ldi	r31, 0x0B	; 11
 62c:	31 97       	sbiw	r30, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <main+0x198>
 630:	00 c0       	rjmp	.+0      	; 0x632 <main+0x19e>
 632:	00 00       	nop
				_delay_us(3033);
				PORTB &= ~(1<<PB1);//PORTB = 0x01;
 634:	c1 98       	cbi	0x18, 1	; 24
 636:	8d e1       	ldi	r24, 0x1D	; 29
 638:	93 e0       	ldi	r25, 0x03	; 3
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <main+0x1a6>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <main+0x1ac>
 640:	00 00       	nop
				_delay_us(798);
				PORTB &= ~(1<<PB0);//PORTB = 0x00;
 642:	c0 98       	cbi	0x18, 0	; 24
 644:	a3 ef       	ldi	r26, 0xF3	; 243
 646:	b1 e0       	ldi	r27, 0x01	; 1
 648:	11 97       	sbiw	r26, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <main+0x1b4>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <main+0x1ba>
 64e:	00 00       	nop
				_delay_ms(500);
				TCCR1A = 0x00;*/

				

				PORTB |= (1<<PB1);
 650:	c1 9a       	sbi	0x18, 1	; 24
 652:	e8 ed       	ldi	r30, 0xD8	; 216
 654:	fb e0       	ldi	r31, 0x0B	; 11
 656:	31 97       	sbiw	r30, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <main+0x1c2>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0x1c8>
 65c:	00 00       	nop
				_delay_us(3033);
				PORTB &= ~(1<<PB1);
 65e:	c1 98       	cbi	0x18, 1	; 24
 660:	88 ed       	ldi	r24, 0xD8	; 216
 662:	9b e0       	ldi	r25, 0x0B	; 11
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <main+0x1d0>
 668:	00 c0       	rjmp	.+0      	; 0x66a <main+0x1d6>
 66a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66c:	8f e7       	ldi	r24, 0x7F	; 127
 66e:	9a e1       	ldi	r25, 0x1A	; 26
 670:	a6 e0       	ldi	r26, 0x06	; 6
 672:	81 50       	subi	r24, 0x01	; 1
 674:	90 40       	sbci	r25, 0x00	; 0
 676:	a0 40       	sbci	r26, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <main+0x1de>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <main+0x1e8>
 67c:	00 00       	nop
				_delay_us(3033);
				_delay_ms(500);


				PORTB |= (1<<PB2);
 67e:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 680:	a6 ef       	ldi	r26, 0xF6	; 246
 682:	b9 e0       	ldi	r27, 0x09	; 9
 684:	11 97       	sbiw	r26, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <main+0x1f0>
 688:	00 c0       	rjmp	.+0      	; 0x68a <main+0x1f6>
 68a:	00 00       	nop
				_delay_us(2551);
				PORTB &= ~(1<<PB2);
 68c:	c2 98       	cbi	0x18, 2	; 24
 68e:	e6 ef       	ldi	r30, 0xF6	; 246
 690:	f9 e0       	ldi	r31, 0x09	; 9
 692:	31 97       	sbiw	r30, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <main+0x1fe>
 696:	00 c0       	rjmp	.+0      	; 0x698 <main+0x204>
 698:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69a:	8f e7       	ldi	r24, 0x7F	; 127
 69c:	9a e1       	ldi	r25, 0x1A	; 26
 69e:	a6 e0       	ldi	r26, 0x06	; 6
 6a0:	81 50       	subi	r24, 0x01	; 1
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	a0 40       	sbci	r26, 0x00	; 0
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <main+0x20c>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <main+0x216>
 6aa:	00 00       	nop
 6ac:	69 cf       	rjmp	.-302    	; 0x580 <main+0xec>

000006ae <__mulhi3>:
 6ae:	55 27       	eor	r21, r21
 6b0:	00 24       	eor	r0, r0

000006b2 <__mulhi3_loop>:
 6b2:	80 ff       	sbrs	r24, 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <__mulhi3_skip1>
 6b6:	06 0e       	add	r0, r22
 6b8:	57 1f       	adc	r21, r23

000006ba <__mulhi3_skip1>:
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	61 15       	cp	r22, r1
 6c0:	71 05       	cpc	r23, r1
 6c2:	21 f0       	breq	.+8      	; 0x6cc <__mulhi3_exit>
 6c4:	96 95       	lsr	r25
 6c6:	87 95       	ror	r24
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	99 f7       	brne	.-26     	; 0x6b2 <__mulhi3_loop>

000006cc <__mulhi3_exit>:
 6cc:	95 2f       	mov	r25, r21
 6ce:	80 2d       	mov	r24, r0
 6d0:	08 95       	ret

000006d2 <__udivmodqi4>:
 6d2:	99 1b       	sub	r25, r25
 6d4:	79 e0       	ldi	r23, 0x09	; 9
 6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <__udivmodqi4_ep>

000006d8 <__udivmodqi4_loop>:
 6d8:	99 1f       	adc	r25, r25
 6da:	96 17       	cp	r25, r22
 6dc:	08 f0       	brcs	.+2      	; 0x6e0 <__udivmodqi4_ep>
 6de:	96 1b       	sub	r25, r22

000006e0 <__udivmodqi4_ep>:
 6e0:	88 1f       	adc	r24, r24
 6e2:	7a 95       	dec	r23
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__udivmodqi4_loop>
 6e6:	80 95       	com	r24
 6e8:	08 95       	ret

000006ea <__udivmodhi4>:
 6ea:	aa 1b       	sub	r26, r26
 6ec:	bb 1b       	sub	r27, r27
 6ee:	51 e1       	ldi	r21, 0x11	; 17
 6f0:	07 c0       	rjmp	.+14     	; 0x700 <__udivmodhi4_ep>

000006f2 <__udivmodhi4_loop>:
 6f2:	aa 1f       	adc	r26, r26
 6f4:	bb 1f       	adc	r27, r27
 6f6:	a6 17       	cp	r26, r22
 6f8:	b7 07       	cpc	r27, r23
 6fa:	10 f0       	brcs	.+4      	; 0x700 <__udivmodhi4_ep>
 6fc:	a6 1b       	sub	r26, r22
 6fe:	b7 0b       	sbc	r27, r23

00000700 <__udivmodhi4_ep>:
 700:	88 1f       	adc	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	5a 95       	dec	r21
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__udivmodhi4_loop>
 708:	80 95       	com	r24
 70a:	90 95       	com	r25
 70c:	68 2f       	mov	r22, r24
 70e:	79 2f       	mov	r23, r25
 710:	8a 2f       	mov	r24, r26
 712:	9b 2f       	mov	r25, r27
 714:	08 95       	ret

00000716 <__divmodhi4>:
 716:	97 fb       	bst	r25, 7
 718:	09 2e       	mov	r0, r25
 71a:	07 26       	eor	r0, r23
 71c:	0a d0       	rcall	.+20     	; 0x732 <__divmodhi4_neg1>
 71e:	77 fd       	sbrc	r23, 7
 720:	04 d0       	rcall	.+8      	; 0x72a <__divmodhi4_neg2>
 722:	e3 df       	rcall	.-58     	; 0x6ea <__udivmodhi4>
 724:	06 d0       	rcall	.+12     	; 0x732 <__divmodhi4_neg1>
 726:	00 20       	and	r0, r0
 728:	1a f4       	brpl	.+6      	; 0x730 <__divmodhi4_exit>

0000072a <__divmodhi4_neg2>:
 72a:	70 95       	com	r23
 72c:	61 95       	neg	r22
 72e:	7f 4f       	sbci	r23, 0xFF	; 255

00000730 <__divmodhi4_exit>:
 730:	08 95       	ret

00000732 <__divmodhi4_neg1>:
 732:	f6 f7       	brtc	.-4      	; 0x730 <__divmodhi4_exit>
 734:	90 95       	com	r25
 736:	81 95       	neg	r24
 738:	9f 4f       	sbci	r25, 0xFF	; 255
 73a:	08 95       	ret

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
